{"version":3,"sources":["logo.svg","select-year/select-year.js","points/points.js","map/map.js","app.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SelectYear","_ref","className","list","active","onChange","react_default","a","createElement","concat","map","year","i","key","onClick","Points","_ref2","coords","delta","x1","x","y1","y","x2","y2","getDelta","points","distances","dx","dy","distance","parseInt","Math","sqrt","closest","minBy","YEARS","1887","name","url","1896","1938","2019","mousedownCoords","isDragging","isViewing","Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onMouseDown","synEvent","e","nativeEvent","offsetX","offsetY","onMouseMove","setState","state","offset","onMouseUp","toConsumableArray","beforeYear","afterYear","pointsData","_this2","_this$state","id","src","draggable","style","width","transform","src_points_points","select_year_select_year","keys","value","React","Component","App","map_map","Boolean","window","location","hostname","match","ReactDOM","render","src_app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30daff68.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./select-year.scss\";\n\nconst SelectYear = ({ className, list, active, onChange }) => (\n  <section className={`select-year ${className}`}>\n    {list.map((year, i) => (\n      <button\n        key={i}\n        onClick={() => onChange(year)}\n        className={active === year ? \"active\" : \"\"}\n      >\n        {year}\n      </button>\n    ))}\n  </section>\n);\n\nexport default SelectYear;\n","import React from \"react\";\nimport \"./points.scss\";\n\nconst Points = ({ list }) => (\n  <svg className=\"svg-wrapper points\">\n    {list.map(({ coords, delta }, i) => (\n      <line\n        x1={`${coords.x}`}\n        y1={`${coords.y}`}\n        x2={`${coords.x + delta.x}`}\n        y2={`${coords.y + delta.y}`}\n      />\n    ))}\n  </svg>\n);\n\nexport default Points;\n","import React from \"react\";\nimport { keys, minBy } from \"lodash\";\nimport SelectYear from \"../select-year/select-year\";\nimport Points from \"../points/points\";\nimport pointsData from \"../stubs/points.json\";\nimport \"./map.scss\";\n\nconst getDelta = ({ points, x, y }) => {\n  const distances = points.map(({ coords, delta }) => {\n    const [dx, dy] = [coords.x - x, coords.y - y];\n    const distance = parseInt(Math.sqrt(dx * dx + dy * dy));\n    return {\n      delta,\n      distance\n    };\n  });\n\n  const closest = minBy(distances, \"distance\");\n\n  return {\n    x: closest.delta.x,\n    y: closest.delta.y\n  };\n};\n\nconst YEARS = {\n  \"1887\": { name: \"1887\", url: \"1887.jpg\" },\n  \"1896\": { name: \"1896\", url: \"1896.jpg\" },\n  \"1938\": { name: \"1938\", url: \"1938.jpg\" },\n  \"2019\": { name: \"2019\", url: \"2019.jpg\" }\n};\n\nlet mousedownCoords = {\n  x: null,\n  y: null\n};\n\nlet isDragging = false;\nlet isViewing = true;\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      beforeYear: \"1887\",\n      afterYear: \"1938\",\n      points: pointsData,\n      delta: { x: 0, y: 0 },\n      offset: 0\n    };\n  }\n\n  onMouseDown = synEvent => {\n    const e = synEvent.nativeEvent;\n    isDragging = true;\n    mousedownCoords = {\n      x: e.offsetX,\n      y: e.offsetY\n    };\n  };\n\n  onMouseMove = synEvent => {\n    const e = synEvent.nativeEvent;\n    if (isDragging) {\n      this.setState({\n        delta: {\n          x: e.offsetX - mousedownCoords.x,\n          y: e.offsetY - mousedownCoords.y\n        }\n      });\n    }\n    if (isViewing) {\n      const delta = getDelta({\n        points: this.state.points,\n        x: e.offsetX,\n        y: e.offsetY\n      });\n      this.setState({\n        delta,\n        offset: e.offsetX\n      });\n    }\n  };\n\n  onMouseUp = synEvent => {\n    const e = synEvent.nativeEvent;\n    isDragging = false;\n    this.setState({\n      points: [\n        ...this.state.points,\n        {\n          coords: {\n            x: mousedownCoords.x,\n            y: mousedownCoords.y\n          },\n          delta: {\n            x: e.offsetX - mousedownCoords.x,\n            y: e.offsetY - mousedownCoords.y\n          }\n        }\n      ]\n    });\n\n    mousedownCoords = {\n      x: null,\n      y: null\n    };\n\n    this.setState({ delta: { x: 0, y: 0 } });\n  };\n\n  render() {\n    const { delta, beforeYear, afterYear, offset, points } = this.state;\n    return (\n      <div className=\"map\">\n        <div\n          className=\"wrapper\"\n          id=\"wrapper\"\n          onMouseMove={this.onMouseMove}\n          onMouseDown={this.onMouseDown}\n          onMouseUp={this.onMouseUp}\n        >\n          <img\n            src={`images/${YEARS[afterYear].url}`}\n            className=\"new-map\"\n            draggable=\"false\"\n          />\n          <div\n            className=\"map-wrapper\"\n            id=\"map-wrapper\"\n            style={{ width: `${offset}px` }}\n          >\n            <img\n              src={`images/${YEARS[beforeYear].url}`}\n              className=\"map\"\n              style={{ transform: `translate(${delta.x}px, ${delta.y}px)` }}\n              id=\"map\"\n              draggable=\"false\"\n              width=\"2510\"\n            />\n          </div>\n          <Points list={points} />\n        </div>\n\n        <SelectYear\n          className=\"year-before\"\n          active={beforeYear}\n          list={keys(YEARS)}\n          onChange={value => this.setState({ beforeYear: value })}\n        />\n        <SelectYear\n          className=\"year-after\"\n          active={afterYear}\n          list={keys(YEARS)}\n          onChange={value => this.setState({ afterYear: value })}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Map;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport Map from \"./map/map\";\nimport \"./app.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" />\n\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}